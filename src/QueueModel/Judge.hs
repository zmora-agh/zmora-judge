{-# LANGUAGE BangPatterns, DeriveDataTypeable, DeriveGeneric, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC  -fno-warn-unused-imports #-}
module QueueModel.Judge (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified GHC.Generics as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)

protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Judge\", haskellPrefix = [MName \"QueueModel\"], parentModule = [], baseName = MName \"Judge\"}, protoFilePath = [\"QueueModel\",\"Judge.hs\"], protoSource = \"judge.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Judge.Task\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\"], baseName = MName \"Task\"}, descFilePath = [\"QueueModel\",\"Judge\",\"Task.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.task_id\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\"], baseName' = FName \"task_id\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.configuration\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\"], baseName' = FName \"configuration\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.files\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\"], baseName' = FName \"files\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Judge.Task.File\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"Task\"], baseName = MName \"File\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.tests\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\"], baseName' = FName \"tests\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Judge.Task.Test\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"Task\"], baseName = MName \"Test\"}), hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = True},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Judge.Task.File\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"Task\"], baseName = MName \"File\"}, descFilePath = [\"QueueModel\",\"Judge\",\"Task\",\"File.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.File.name\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"File\"], baseName' = FName \"name\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.File.content\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"File\"], baseName' = FName \"content\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = True},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Judge.Task.Test\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"Task\"], baseName = MName \"Test\"}, descFilePath = [\"QueueModel\",\"Judge\",\"Task\",\"Test.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.Test.test_id\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"Test\"], baseName' = FName \"test_id\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.Test.input\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"Test\"], baseName' = FName \"input\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.Test.output\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"Test\"], baseName' = FName \"output\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.Test.time_limit\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"Test\"], baseName' = FName \"time_limit\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.Task.Test.ram_limit\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"Task\",MName \"Test\"], baseName' = FName \"ram_limit\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 40}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = True},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Judge.TaskResult\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\"], baseName = MName \"TaskResult\"}, descFilePath = [\"QueueModel\",\"Judge\",\"TaskResult.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.result_id\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\"], baseName' = FName \"result_id\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.compilation_log\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\"], baseName' = FName \"compilation_log\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.tests_results\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\"], baseName' = FName \"tests_results\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Judge.TaskResult.TestResult\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"TaskResult\"], baseName = MName \"TestResult\"}), hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = True},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Judge.TaskResult.TestResult\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"TaskResult\"], baseName = MName \"TestResult\"}, descFilePath = [\"QueueModel\",\"Judge\",\"TaskResult\",\"TestResult.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.TestResult.source_test_id\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\",MName \"TestResult\"], baseName' = FName \"source_test_id\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.TestResult.status\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\",MName \"TestResult\"], baseName' = FName \"status\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Judge.TaskResult.Status\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"TaskResult\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.TestResult.execution_time\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\",MName \"TestResult\"], baseName' = FName \"execution_time\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Judge.TaskResult.TestResult.ram_usage\", haskellPrefix' = [MName \"QueueModel\"], parentModule' = [MName \"Judge\",MName \"TaskResult\",MName \"TestResult\"], baseName' = FName \"ram_usage\", baseNamePrefix' = \"_\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = True}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".Judge.TaskResult.Status\", haskellPrefix = [MName \"QueueModel\"], parentModule = [MName \"Judge\",MName \"TaskResult\"], baseName = MName \"Status\"}, enumFilePath = [\"QueueModel\",\"Judge\",\"TaskResult\",\"Status.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"OK\"),(EnumCode {getEnumCode = 1},\"RTE\"),(EnumCode {getEnumCode = 2},\"MEM\"),(EnumCode {getEnumCode = 3},\"TLE\"),(EnumCode {getEnumCode = 4},\"ANS\"),(EnumCode {getEnumCode = 5},\"CME\")]}], oneofs = [], knownKeyMap = fromList []}"

fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\176\EOT\n\vjudge.proto\"\246\SOH\n\EOTTask\DC2\SI\n\atask_id\CAN\SOH \SOH(\ETX\DC2\NAK\n\rconfiguration\CAN\STX \SOH(\t\DC2\US\n\ENQfiles\CAN\ETX \ETX(\v2\DLE.Judge.Task.File\DC2\US\n\ENQtests\CAN\EOT \ETX(\v2\DLE.Judge.Task.Test\SUB%\n\EOTFile\DC2\f\n\EOTname\CAN\SOH \SOH(\t\DC2\SI\n\acontent\CAN\STX \SOH(\f\SUB]\n\EOTTest\DC2\SI\n\atest_id\CAN\SOH \SOH(\ETX\DC2\r\n\ENQinput\CAN\STX \SOH(\t\DC2\SO\n\ACKoutput\CAN\ETX \SOH(\t\DC2\DC2\n\ntime_limit\CAN\EOT \SOH(\ETX\DC2\DC1\n\tram_limit\CAN\ENQ \SOH(\ETX\"\167\STX\n\nTaskResult\DC2\DC1\n\tresult_id\CAN\SOH \SOH(\ETX\DC2\ETB\n\SIcompilation_log\CAN\STX \SOH(\t\DC23\n\rtests_results\CAN\ETX \ETX(\v2\FS.Judge.TaskResult.TestResult\SUBy\n\nTestResult\DC2\SYN\n\SOsource_test_id\CAN\SOH \SOH(\ETX\DC2(\n\ACKstatus\CAN\STX \SOH(\SO2\CAN.Judge.TaskResult.Status\DC2\SYN\n\SOexecution_time\CAN\ETX \SOH(\ETX\DC2\DC1\n\tram_usage\CAN\EOT \SOH(\ETX\"=\n\ACKStatus\DC2\ACK\n\STXOK\DLE\NUL\DC2\a\n\ETXRTE\DLE\SOH\DC2\a\n\ETXMEM\DLE\STX\DC2\a\n\ETXTLE\DLE\ETX\DC2\a\n\ETXANS\DLE\EOT\DC2\a\n\ETXCME\DLE\ENQ")